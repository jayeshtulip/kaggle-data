apiVersion: v1
kind: ConfigMap
metadata:
  name: webhook-code
  namespace: loan-default
data:
  webhook.py: |
    from flask import Flask, request, jsonify
    import requests
    import json
    import os
    import logging

    app = Flask(__name__)
    logging.basicConfig(level=logging.INFO)

    # GitHub configuration
    GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN', '')
    GITHUB_API_URL = 'https://api.github.com'

    @app.route('/health', methods=['GET'])
    def health_check():
        return jsonify({"status": "healthy"}), 200

    @app.route('/prometheus', methods=['POST'])
    def handle_prometheus_alert():
        try:
            alert_data = request.json
            logging.info(f"Received alert: {json.dumps(alert_data, indent=2)}")
            
            if alert_data.get('status') == 'firing':
                for alert in alert_data.get('alerts', []):
                    if should_trigger_github(alert):
                        success = trigger_github_workflow(alert)
                        if success:
                            logging.info("Successfully triggered GitHub workflow")
                        else:
                            logging.error("Failed to trigger GitHub workflow")
            
            return jsonify({"status": "received"}), 200
            
        except Exception as e:
            logging.error(f"Error processing alert: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 500

    def should_trigger_github(alert):
        """Check if alert should trigger GitHub Actions"""
        labels = alert.get('labels', {})
        return labels.get('trigger_github') == 'true'

    def trigger_github_workflow(alert):
        """Trigger GitHub Actions workflow"""
        try:
            # Extract alert information
            labels = alert.get('labels', {})
            annotations = alert.get('annotations', {})
            
            repo = annotations.get('github_repo', 'jayeshtulip/kaggle-data')
            workflow_file = annotations.get('github_workflow_file', 'retrain.yml')
            ref = annotations.get('github_ref', 'main')
            
            # Skip if no GitHub token configured
            if not GITHUB_TOKEN:
                logging.warning("No GitHub token configured, skipping workflow trigger")
                return False
            
            # Create repository dispatch event
            url = f"{GITHUB_API_URL}/repos/{repo}/dispatches"
            
            headers = {
                'Authorization': f'token {GITHUB_TOKEN}',
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
            }
            
            payload = {
                'event_type': 'model-performance-alert',
                'client_payload': {
                    'alert_name': labels.get('alertname', 'Unknown'),
                    'severity': labels.get('severity', 'unknown'),
                    'summary': annotations.get('summary', ''),
                    'description': annotations.get('description', ''),
                    'workflow_file': workflow_file,
                    'model_variant': labels.get('model_variant', 'unknown'),
                    'timestamp': alert.get('startsAt', ''),
                    'ref': ref
                }
            }
            
            logging.info(f"Triggering GitHub workflow: {repo} -> {workflow_file}")
            
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            
            if response.status_code == 204:
                logging.info(f"Successfully triggered workflow in {repo}")
                return True
            else:
                logging.error(f"GitHub API error: {response.status_code} - {response.text}")
                return False
                
        except requests.RequestException as e:
            logging.error(f"Request error triggering GitHub workflow: {str(e)}")
            return False
        except Exception as e:
            logging.error(f"Unexpected error triggering GitHub workflow: {str(e)}")
            return False

    @app.route('/test-github', methods=['POST'])
    def test_github_integration():
        """Test endpoint to verify GitHub integration"""
        if not GITHUB_TOKEN:
            return jsonify({"error": "GitHub token not configured"}), 400
        
        test_alert = {
            'labels': {
                'alertname': 'TestAlert',
                'severity': 'critical',
                'trigger_github': 'true'
            },
            'annotations': {
                'summary': 'Test alert for GitHub integration',
                'github_repo': 'jayeshtulip/kaggle-data',
                'github_workflow_file': 'test-workflow.yml',
                'github_ref': 'main'
            }
        }
        
        success = trigger_github_workflow(test_alert)
        
        if success:
            return jsonify({"status": "success", "message": "Test workflow triggered"}), 200
        else:
            return jsonify({"status": "error", "message": "Failed to trigger test workflow"}), 500

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080, debug=False)
    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-receiver
  namespace: loan-default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook-receiver
  template:
    metadata:
      labels:
        app: webhook-receiver
    spec:
      containers:
      - name: webhook-receiver
        image: python:3.9-slim
        command: ["/bin/bash"]
        args:
          - -c
          - |
            pip install flask requests
            cd /app
            python webhook.py
        ports:
        - containerPort: 8080
        env:
        - name: GITHUB_TOKEN
          value: "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"
        volumeMounts:
        - name: webhook-code
          mountPath: /app
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: webhook-code
        configMap:
          name: webhook-code